#!/usr/bin/python3

import rospy
import rosnode
import time
import os
import rostopic
import rosgraph.masterapi
import random
import string

from mrs_msgs.msg import ControlManagerDiagnostics

class TopicChecker:

    def __init__(self, topic):

        self.topic = topic

        self.sub = rospy.Subscriber(topic, rospy.AnyMsg, self.callback)

        self.got = False

    def __init__(self, topic, topic_type):

        self.topic = topic

        self.sub = rospy.Subscriber(topic, topic_type, self.callback)

        self.got = False

    def callback(self, msg):
        self.got = True
        self.msg = msg

    def ready(self):
        return self.got

    def getTopic(self):
        return self.topic

    def getMsg(self):
        return self.msg

class Node:

    def checkMaster(self):
        try:
            rosgraph.masterapi.Master('/rostopic').getPid()
        except:
            return False

        return True

    def __init__(self):

        UAV_NAME = os.getenv('UAV_NAME')

        while UAV_NAME == None:
            rospy.logerr('[ERROR]: Environment variable UAV_NAME not set!')
            time.sleep(1.0)

        while not self.checkMaster():
            print("waiting for Master")
            time.sleep(1.0)

        try:
            random_str = str(''.join(random.choices(string.ascii_uppercase + string.digits, k=8)))
            rospy.init_node("waitForTakeoff_{}_{}".format(UAV_NAME, random_str), anonymous=True)
        except:
            return
            pass

        control_diag_checker = TopicChecker("/" + UAV_NAME + "/control_manager/diagnostics", ControlManagerDiagnostics)

        while not rospy.is_shutdown():

            if control_diag_checker.ready():
                if control_diag_checker.getMsg().flying_normally:
                    break
                else:
                    print("waiting for takeoff")
            else:
                print("waiting for {}".format(control_diag_checker.getTopic()))

            time.sleep(1.0)

if __name__ == '__main__':
    try:
        node = Node()
    except rospy.ROSInterruptException:
        pass
